export const allMainArticles = [
  {
    id: 100,
    title: "Storing my secrets safely on GitHub",
    subtitle: "The day i exposed my secret keys in Git, and how did it solve.",
    dateMonth: "JUN",
    dateNumber: 21,
    minutesRead: 5,
    categories: ["Best Practices", "Web Development", "GitHub"],
    banner:
      "https://firebasestorage.googleapis.com/v0/b/bornsrss-8ab5d.appspot.com/o/portfolio%2Fscreens%2FgitEmail.jpg?alt=media&token=b20c6652-834b-424a-8f74-ef2acb66e2ed",
    articleImg:
      "https://firebasestorage.googleapis.com/v0/b/bornsrss-8ab5d.appspot.com/o/portfolio%2Fscreens%2FgitEmail.jpg?alt=media&token=b20c6652-834b-424a-8f74-ef2acb66e2ed",
    content:
      "Many days ago, spending time sending commits I was ignored an awarefrom GitHub, lately GitGuardian emailed me on regard security leak, Key exposed with your GitHub account. What happened? Secret keys generated by reCAPTCHA system were exposed in my repository. At first my “solution” was just deleting the .env file where I stored those keys, save changes, commit and push again. however, it didn’t fix security problem. Since git keeps file in the commit, history. Afterward I started searching for a solution in stack overflow, and I came across with git filter-repo API",
    paragrapsArticle: [
      {
        subtitleParagraph:
          "Step by step guideline to remediate the security leak.undefined",
        paragraph: "",
        list: [
          "1.	Revoke the exposed secret keys.",
          "2.	Clean the git history",
          "3.	Inspect Logs.",
        ],
        codeSnippet: {},
        code: "",
      },

      {
        subtitleParagraph: "Step 1: Revoking the secret keys.",
        paragraph:
          "At first i had to remove .env file, so be ensure no one will access the involved service.",
        list: [],
        codeSnippet: {},
        code: "",
      },
      {
        subtitleParagraph:
          "Step 2: Clean the git history (is when git filter-repo comes into play)",
        paragraph:
          "Thankfully, for this simple case, git provides this command that make cleaning things up easy.I recommend you use git-filter-repo, this tool was very useful to rewrite the history of my project in a straightforward way",
        list: [],
        codeSnippet: "",
        code: "",
      },
      {
        subtitleParagraph: undefined,
        paragraph: "First, I installed git-filter-repo in my bash.",
        list: [],
        codeSnippet: [],
        code: "",
      },
      {
        subtitleParagraph: undefined,
        paragraph:
          "To tell git-filter-repo to excise a file from the git history, I use this single command:",
        list: [],
        codeSnippet: {},
        code: "git filter-repo --use-base-name --path [FILENAME] --invert-paths",
      },
      {
        subtitleParagraph: undefined,
        paragraph:
          "The - -use-base-name option tells git-filter-repo that we are specifying a file name, and not a full path to a file. Normally, git-filter-repo command works by ignoring the filenames specified (as the name suggest, in order to filter out). So, I was interested in opposite behavior, we can indicate to ignore everything except the specified file. So we must pass - - invert-paths to indicate this behavior. If you leave off the - - invert-paths, you will excise everything except the file you are specifying, which is exact the opposite case we want, and would likely be a completely mess, so, don’t do that. ",
        list: [],
        codeSnippet: {},
        code: undefined,
      },
      {
        subtitleParagraph: "Step 3: Inspect logs.",
        paragraph:
          "After cleaning, I inspected my Git logs to confirm that the .env file was gone from the history.",
        list: [],
        codeSnippet: {},
        code: undefined,
      },
      {
        subtitleParagraph: undefined,
        paragraph:
          "In conclusion: i think this is not the only or ultimate solution, we should consider different factors such as project size, team geography, and project scope, your may need additional safeguards, though in my specific case, this approach works perfectly. The key lesson I learned were:",

        list: [
          "•	Is a good practice to add the .env file to .gitignore from the very beginning",
          "•	 Revoke compromised keys immediately.",
          "•	Don’t just delete files, instead, make sure they are removed from git history",
        ],
        codeSnippet: {},
        code: "",
      },
      {
        subtitle: undefined,
        paragraph:
          "Mistakes happen, but what matters is learning about them and making sure they don’t happen again.",
        list: [],
        codeSnippet: {},
        code: undefined,
      },
    ],
  },
  {
    id: 101,
    title: "JavaScript Visualized: Promises & Async/Await",
    subtitle: "Loading images and the user experience",
    dateMonth: "AGU",
    dateNumber: 8,
    minutesRead: 5,
    categories: ["Best Practices", "Web Development", "GitHub"],
    banner:
      "https://firebasestorage.googleapis.com/v0/b/bornsrss-8ab5d.appspot.com/o/portfolio%2Fscreens%2Fscreen-articulo-loading%2Fejemplo-media.png?alt=media&token=cecbc66a-0583-4ebc-b932-d7ffb2b45a45",
    articleImg:
      "https://nestify.io/wp-content/webp-express/webp-images/uploads/2024/06/image-89.png.webp",
    balazoArticleImg: "Detail: this is the CardComponent.jsx i built",
    content: (
      <>
        One of the most important things i had been overlooking, while
        developing this portafolio, was the the{" "}
        <strong className="txt-highlighted">
          optimization of media loading,{" "}
        </strong>
        such as videos and images. Interms of user experience, is important to
        ensure that the website remains responsive to any changes that may
        occur. For this reason I decided to manage the{" "}
        <strong className="txt-highlighted"> loading state </strong> in some
        components(images, and video). In the same way as error handling,
        especially when resources are limited or the user has a slow Wi-Fi
        connection (issues like these might happpen),
      </>
    ),

    paragrapsArticle: [
      {
        subtitleParagraph: undefined,
        paragraph: (
          <strong>
            "I tackled this challenge by using the{" "}
            <strong className="txt-highlighted">useState( )</strong> hook,
            asynchronous functions{" "}
            <strong className="txt-highlighted">(async/await)</strong> , and
            promises (new Promise). It's like my program is saying ' I promise
            you to either make a request and display your videos, or shows an
            error message if i'm unable to retrieve the information (due to lack
            of the resource ...etc)'",
          </strong>
        ),
        lista: [],
        codeSnippet: {},
        code: "",
      },

      {
        subtitleParagraph: undefined,
        paragraph: "I consider that a promise can have the following states:",

        lista: [
          {
            txt_item: "Fulfilled – The action was succesfully completed",
            subList: [],
          },
          {
            txt_item: "Rejected – The process failed",
            subList: [],
          },
          {
            txt_item: "Pending – no action has been completed yet. ",
            subList: [],
          },
          {
            txt_item:
              "Settled – The action has either been fulfille or rejected. ",
            subList: [],
          },
        ],
        codeSnippet: {},
        code: "",
      },
      {
        subtitleParagraph: "",
        paragraph:
          "In this case, my promise receives the resolve and reject functions as parameters, if the resoult is successful, I use the .then( ) function; otherwise, if it fails, the .catch( ) function is executed",
        lista: [],
        codeSnippet: {},
        code: "",
      },
      {
        subtitleParagraph: undefined,
        paragraph: (
          <>
            "It's important to keep in mind that the JavaScript environment was
            designed as a{" "}
            <strong style={{ color: "rgba(27, 27, 82, 1)" }}>
              synchronous programming languaje
            </strong>
            , which implies a single thread of execution. As a result of this
            approach: tasks are executed one by one in sequential order. A very
            similar similar situacion happens when your are waiting in the
            checkout line at a grocery store to pay. you can only pay once it's
            your turn.",
          </>
        ),
        lista: [],
        codeSnippet: {},
        code: "",
      },
      {
        subtitleParagraph: undefined,
        paragraph:
          "After this brief introduction, I will show you my solution.",
        list: [],
        codeSnippet: {},
        code: "",
      },
      {
        subtitleParagraph: "Código final documentado - CardContent.jsx",
        paragraph:
          "Here's the full CardContent.jsx component, with explanations of preloading for images/videos and the associated loading state.",
        lista: [],
        codeSnippet: {},
        code: "",
      },
      {
        subtitleParagraph: undefined,
        paragraph: undefined,
        lista: [],
        codeSnippet: {
          alignDiv: "sectionCodeSnippet",
          codeBreakdown: [
            "MediaStatus is an object that stores the loading state of each media element (video and images)",
            "At the very beginnig, all values are set to false, since no loading attempt has been made yet.",
          ],
          codeTitleImg: "✅1.Importaciones y estado inicial",
          codePreview:
            "https://firebasestorage.googleapis.com/v0/b/bornsrss-8ab5d.appspot.com/o/portfolio%2Fscreens%2Fscreen-articulo-loading%2Fss-importacion-estado-inicial.png?alt=media&token=fe130b74-e27c-4506-beac-370c19b0191a",
          balazo: undefined,
        },
        code: undefined,
      },
      {
        subtitleParagraph: "Description:",
        paragraph:
          "1. useEffect is executed when the component is mounted, or when the value assigned to item changes, since item represents each project associated with CardComponent.jsx",
        lista: [],
        codeSnippet: {},
        code: undefined,
      },
      {
        subtitleParagraph: "1. Video preloading",
        paragraph: "loadMedia( ) is an asynchronous function that:",

        lista: [
          {
            txt_item: "It Creates a <video> element in memory",
            subList: [],
          },
          {
            txt_item:
              "if the componet loads successfully (we use onloadeddata),it updates the videoLoaded state from false to true",
            subList: [],
          },
          {
            txt_item:
              "If it fails, (using onerror), it updates the videoError state from false to true value",
            subList: [],
          },
        ],
        codeSnippet: {},
        code: undefined,
      },
      {
        subtitleParagraph: "2. Image preloading",
        paragraph: "",

        lista: [
          {
            txt_item:
              "loadScreenShot() is a function that returns a new Promise",
            subList: [],
          },
          {
            txt_item: "Use new Image( ) to preload the image in memory ",
            subList: [],
          },
          {
            txt_item:
              "If it loads (using onload), it updates the associated state (firstScreenLoaded or secondScreenLoaded)",
            subList: [],
          },
          {
            txt_item:
              "If it fails (with onerror), it updates the error state (firstScreenError or secondScreenError)",
            subList: [],
          },
        ],
        codeSnippet: {},
        code: undefined,
      },
      {
        subtitleParagraph: undefined,
        paragraph:
          "3.- Promise.all() loads all my available images more efficiently",
        lista: [],
        codeSnippet: {},
        code: undefined,
      },
      {
        subtitleParagraph: undefined,
        paragraph: undefined,
        lista: [],
        codeSnippet: {
          alignDiv: "sectionCodeSnippetSingleColumn",
          codeBreakdown: [],
          codeTitleImg: "Precarga de Medios (useEffect)",
          codePreview:
            "https://firebasestorage.googleapis.com/v0/b/bornsrss-8ab5d.appspot.com/o/portfolio%2Fscreens%2Fscreen-articulo-loading%2Fss-precarga-medios-useEffect.png?alt=media&token=1c40944b-6522-44da-8976-4384240c7d6b",
        },
        code: undefined,
      },

      {
        subtitleParagraph: "Overview:",
        paragraph: undefined,
        lista: [
          {
            txt_item:
              "If there is an error (videoError), a message is displayed.",
            subList: [],
          },
          {
            txt_item:
              "If the video is still loading (!videoLoaded && !videoError), a spinner is shown",
            subList: [],
          },
          {
            txt_item:
              "When the videos is loaded (the state is updated to true: videoLoaded: true), it is displayed with opacity: 1",
            subList: [],
          },
        ],
        codeSnippet: {},
        code: undefined,
      },
      {
        subtitleParagraph: undefined,
        paragraph: undefined,
        lista: [],
        codeSnippet: {
          alignDiv: "sectionCodeSnippetSingleColumn",
          codeBreakdown: [],
          codeTitleImg: "🌐 Conditional render 3.1. Video",
          codePreview:
            "https://firebasestorage.googleapis.com/v0/b/bornsrss-8ab5d.appspot.com/o/portfolio%2Fscreens%2Fscreen-articulo-loading%2Fss-renderizado-condicional.png?alt=media&token=5b423f27-4234-4c17-aa54-b1f453ab2e57",
        },
        code: undefined,
      },
      {
        subtitleParagraph: "Images explanation",
        paragraph:
          "While the image is still loading (!firstScreenLoaded: true & !FirstScreenError), the Spinner component is displayed. If there is an error (firstScreenError), a pre-configured error message is shown. When the image has loaded successfully (firstScreenLoaded: true) it is displayed with the loaded class",
        lista: [],
        codeSnippet: {
          alignDiv: "",
          codeBreakdown: [],
          codeTitleImg: "",
          codePreview: "",
        },
        code: undefined,
      },
      {
        subtitleParagraph: "Summary of the workflow",
        paragraph: "",
        lista: [
          {
            txt_item:
              "When the component mounts, useEffect( ) executes loadMedia( )",
            subList: [],
          },
          {
            txt_item: "The video and images are preload in the background",
            subList: [],
          },
          {
            txt_item: "When an item is loaded, the mediaStatus is updated",
            subList: [],
          },
          {
            txt_item:
              "React re-render and display the content based on the state",
            subList: [
              "Loading: Spinner",
              "Error: error mesage",
              "Loaded: Video/Imagen visible",
            ],
          },
        ],
        codeSnippet: {},
        code: undefined,
      },

      {
        subtitleParagraph: undefined,
        paragraph: undefined,
        lista: [],
        codeSnippet: {
          alignDiv: "sectionCodeSnippetSingleColumn",
          codeBreakdown: [],
          codeTitleImg: "3.2 Images",
          codePreview:
            "https://firebasestorage.googleapis.com/v0/b/bornsrss-8ab5d.appspot.com/o/portfolio%2Fscreens%2Fscreen-articulo-loading%2Fss-imagenes-wrapper-ultima.png?alt=media&token=590c534d-82d3-4f17-8255-6fe76f5bb07d",
        },
        code: undefined,
      },
      {
        subtitleParagraph: "In conclusion",
        paragraph:
          "For me,  this was a medium complicated level, especially regarding  Promises, Nevertheless I was able to fully grasp the concepts through coding practice. By reinforcing the topics I had learned while writing this summary article, such as state management, promises, and async/await functions – I was able to display contetent al the same time I consider user experience in mind. This also allowed me to improve the user experience by preventing uncertainty when the page contains empty spaces and elements don't seem to make sence. Thank you for reading!",
        lista: [],
        codeSnippet: {},
        code: undefined,
      },
    ],
  },
  {
    id: 102,
    title: "Promises in Java Script as in real life",
    subtitle: "The day i exposed my secret keys in Git, and how did it solve.",
    dateMonth: "AGU",
    dateNumber: 17,
    minutesRead: 10,
    categories: ["Web Development", "JavaScript", "UX"],
    banner:
      "https://cdn-media-0.freecodecamp.org/2020/06/Ekran-Resmi-2020-06-06-12.21.27.png",
    articleImg:
      "https://cdn-media-0.freecodecamp.org/2020/06/Ekran-Resmi-2020-06-06-12.21.27.png",
    balazoArticleImg:
      "Detail: adjunto captura de la advertencia hecha por gitGardian",
    content:
      "Many days ago, spending time sending commits I was ignored an awarefrom GitHub, lately GitGuardian emailed me on regard security leak, Key exposed with your GitHub account. What happened? Secret keys generated by reCAPTCHA system were exposed in my repository. At first my “solution” was just deleting the .env file where I stored those keys, save changes, commit and push again. however, it didn’t fix security problem. Since git keeps file in the commit, history. Afterward I started searching for a solution in stack overflow, and I came across with git filter-repo API",
    paragrapsArticle: [
      {
        subtitleParagraph:
          "Step by step guideline to remediate the security leak.undefined",
        paragraph: "",
        lista: [
          {
            txt_item: "1.	Revoke the exposed secret keys.",
            subList: [],
          },
          {
            txt_item: "2.	Clean the git history",
            subList: [],
          },
          {
            txt_item: "3.	Inspect Logs. ",
            subList: [],
          },
        ],

        codeSnippet: {},
        code: "",
      },

      {
        subtitleParagraph: "Step 1: Revoking the secret keys.",
        paragraph:
          "At first i had to remove .env file, so be ensure no one will access the involved service.",
        lista: [],
        codeSnippet: {},
        code: undefined,
      },
      {
        subtitleParagraph:
          "Step 2: Clean the git history (is when git filter-repo comes into play)",
        paragraph:
          "Thankfully, for this simple case, git provides this command that make cleaning things up easy.I recommend you use git-filter-repo, this tool was very useful to rewrite the history of my project in a straightforward way",
        lista: [],
        codeSnippet: {},
        code: undefined,
      },
      {
        subtitleParagraph: undefined,
        paragraph: "First, I installed git-filter-repo in my bash.",
        lista: [],
        codeSnippet: {},
        code: "",
      },
      {
        subtitleParagraph: undefined,
        paragraph:
          "To tell git-filter-repo to excise a file from the git history, I use this single command:",
        lista: [],
        codeSnippet: {},
        code: "git filter-repo --use-base-name --path [FILENAME] --invert-paths",
      },
      {
        subtitleParagraph: undefined,
        paragraph:
          "The - -use-base-name option tells git-filter-repo that we are specifying a file name, and not a full path to a file. Normally, git-filter-repo command works by ignoring the filenames specified (as the name suggest, in order to filter out). So, I was interested in opposite behavior, we can indicate to ignore everything except the specified file. So we must pass - - invert-paths to indicate this behavior. If you leave off the - - invert-paths, you will excise everything except the file you are specifying, which is exact the opposite case we want, and would likely be a completely mess, so, don’t do that. ",
        lista: [],
        codeSnippet: {},
        code: undefined,
      },
      {
        subtitleParagraph: "Step 3: Inspect logs.",
        paragraph:
          "After cleaning, I inspected my Git logs to confirm that the .env file was gone from the history.",
        lista: [],
        codeSnippet: {},
        code: undefined,
      },
      {
        subtitleParagraph: undefined,
        paragraph:
          "In conclusion: i think this is not the only or ultimate solution, we should consider different factors such as project size, team geography, and project scope, your may need additional safeguards, though in my specific case, this approach works perfectly. The key lesson I learned were:",

        lista: [
          {
            txt_item:
              "Is a good practice to add the .env file to .gitignore from the very beginning",
            subList: [],
          },
          { txt_item: "Revoke compromised keys immediately.", subList: [] },
          {
            txt_item:
              "Don’t just delete files, instead, make sure they are removed from git history",
            subList: [],
          },
        ],
        codeSnippet: {},
        code: undefined,
      },
      {
        subtitleParagraph: undefined,
        paragraph:
          "Mistakes happen, but what matters is learning about them and making sure they don’t happen again.",
        lista: [],
        codeSnippet: {},
        code: undefined,
      },
      {
        subtitleParagraph: undefined,
        paragraph: undefined,
        lista: [],
        codeSnippet: {
          codeBreakdown: [
            "mediaStatus es un objeto que almacena el estado de carga de cada medio (video e imágenes)",
            "Inicialmente, todos los valores están en false porque aún no se ha intentado cargar nada",
          ],
          codeTitleImg: "Importaciones y estado inicial",
          codePreview:
            "https://la.mathworks.com/discovery/code-review/_jcr_content/mainParsys/image_copy.adapt.full.medium.gif/1743076707628.gif",
          balazo: undefined,
        },
        code: undefined,
      },
    ],
  },
];
